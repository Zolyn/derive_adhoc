---------- derive-adhoc expansions dump for Enum (start) ----------
top-level:
        $tname       =>  Enum
        $ttype       =>  Enum
        $tvis        =>  
        $tgens       =>  
        $tgnames     =>  
        $twheres     =>  
        $tdeftype    =>  Enum
        $tdefgens    =>  
        $tdefkwd     =>  enum
        ${ tdefvariants VARIANTS } => { VARIANTS }
        is_struct    =   false
        is_enum      =   true
        is_union     =   false
        tvis         =   false
        $tattrs      =>  #[allow(dead_code)]
variant Unit:
        $vname       =>  Unit
        $vtype       =>  Enum :: Unit
        $vpat        =>  Enum :: Unit {}
        ${ vdefbody VNAME FIELDS .. } => VNAME FIELDS ..,
        v_is_unit    =   true
        v_is_tuple   =   false
        v_is_named   =   false
        $vattrs      =>  
variant Tuple:
        $vname       =>  Tuple
        $vtype       =>  Enum :: Tuple
        $vpat        =>  Enum :: Tuple { 0 : f_0, }
        ${ vdefbody VNAME FIELDS .. } => VNAME(FIELDS ..),
        v_is_unit    =   false
        v_is_tuple   =   true
        v_is_named   =   false
        $vattrs      =>  
variant Tuple, field 0:
        $fname       =>  0
        $ftype       =>  usize
        $fvis        =>  
        $fdefvis     =>  
        $fpatname    =>  f_0
        $fdefine     =>  
        fvis         =   false
        fdefvis      =   false
        $fattrs      =>  
variant Struct:
        $vname       =>  Struct
        $vtype       =>  Enum :: Struct
        $vpat        =>  Enum :: Struct { field : f_field, }
        ${ vdefbody VNAME FIELDS .. } => VNAME { FIELDS .. }
        v_is_unit    =   false
        v_is_tuple   =   false
        v_is_named   =   true
        $vattrs      =>  
variant Struct, field field:
        $fname       =>  field
        $ftype       =>  String
        $fvis        =>  
        $fdefvis     =>  
        $fpatname    =>  f_field
        $fdefine     =>  field :
        fvis         =   false
        fdefvis      =   false
        $fattrs      =>  
---------- derive-adhoc expansions dump for Enum (end) ----------
---------- derive-adhoc expansions dump for Unit (start) ----------
top-level:
        $tname       =>  Unit
        $ttype       =>  Unit
        $tvis        =>  
        $tgens       =>  
        $tgnames     =>  
        $twheres     =>  
        $tdeftype    =>  Unit
        $tdefgens    =>  
        $tdefkwd     =>  struct
        ${ tdefvariants VARIANTS } => VARIANTS
        is_struct    =   true
        is_enum      =   false
        is_union     =   false
        tvis         =   false
        $tattrs      =>  #[allow(dead_code)]
value:
        $vname       =>  <error>
        $vtype       =>  Unit
        $vpat        =>  Unit {}
        ${ vdefbody VNAME FIELDS .. } => FIELDS .. ;
        v_is_unit    =   true
        v_is_tuple   =   false
        v_is_named   =   false
        $vattrs      =>  
---------- derive-adhoc expansions dump for Unit (end) ----------
---------- derive-adhoc expansions dump for Tuple (start) ----------
top-level:
        $tname       =>  Tuple
        $ttype       =>  Tuple
        $tvis        =>  
        $tgens       =>  
        $tgnames     =>  
        $twheres     =>  
        $tdeftype    =>  Tuple
        $tdefgens    =>  
        $tdefkwd     =>  struct
        ${ tdefvariants VARIANTS } => VARIANTS
        is_struct    =   true
        is_enum      =   false
        is_union     =   false
        tvis         =   false
        $tattrs      =>  #[allow(dead_code)]
value:
        $vname       =>  <error>
        $vtype       =>  Tuple
        $vpat        =>  Tuple { 0 : f_0, }
        ${ vdefbody VNAME FIELDS .. } => (FIELDS ..) ;
        v_is_unit    =   false
        v_is_tuple   =   true
        v_is_named   =   false
        $vattrs      =>  
value, field 0:
        $fname       =>  0
        $ftype       =>  usize
        $fvis        =>  
        $fdefvis     =>  
        $fpatname    =>  f_0
        $fdefine     =>  
        fvis         =   false
        fdefvis      =   false
        $fattrs      =>  
---------- derive-adhoc expansions dump for Tuple (end) ----------
---------- derive-adhoc expansions dump for Struct (start) ----------
top-level:
        $tname       =>  Struct
        $ttype       =>  Struct
        $tvis        =>  
        $tgens       =>  
        $tgnames     =>  
        $twheres     =>  
        $tdeftype    =>  Struct
        $tdefgens    =>  
        $tdefkwd     =>  struct
        ${ tdefvariants VARIANTS } => VARIANTS
        is_struct    =   true
        is_enum      =   false
        is_union     =   false
        tvis         =   false
        $tattrs      =>  #[allow(dead_code)]
value:
        $vname       =>  <error>
        $vtype       =>  Struct
        $vpat        =>  Struct { field : f_field, }
        ${ vdefbody VNAME FIELDS .. } => { FIELDS .. }
        v_is_unit    =   false
        v_is_tuple   =   false
        v_is_named   =   true
        $vattrs      =>  
value, field field:
        $fname       =>  field
        $ftype       =>  String
        $fvis        =>  
        $fdefvis     =>  
        $fpatname    =>  f_field
        $fdefine     =>  field :
        fvis         =   false
        fdefvis      =   false
        $fattrs      =>  
---------- derive-adhoc expansions dump for Struct (end) ----------
---------- derive-adhoc expansion of ReferenceVersion for Tuple (start) ----------
struct TupleReference < 'reference, F = (), > (& 'reference F,) ; impl <
'reference, F, > From < & 'reference Tuple :: < F > > for TupleReference <
'reference, F, >
{
    fn from(ref_to_owned : & 'reference Tuple :: < F >) -> Self
    {
        match ref_to_owned
        { Tuple { 0 : f_0, } => TupleReference :: < F > { 0 : f_0, }, }
    }
} impl < 'reference, F, > TupleReference < 'reference, F, > where F : Clone,
{
    fn cloned(& self) -> Tuple :: < F >
    {
        match self
        { Self { 0 : f_0, } => Tuple :: < F > { 0 : (* * f_0).clone(), }, }
    }
}
---------- derive-adhoc expansion of ReferenceVersion for Tuple (end) ----------
---------- derive-adhoc expansion of ReferenceVersion for Struct (start) ----------
struct StructReference < 'reference, F = (), > { field : & 'reference F, }
impl < 'reference, F, > From < & 'reference Struct :: < F > > for
StructReference < 'reference, F, >
{
    fn from(ref_to_owned : & 'reference Struct :: < F >) -> Self
    {
        match ref_to_owned
        {
            Struct { field : f_field, } => StructReference :: < F >
            { field : f_field, },
        }
    }
} impl < 'reference, F, > StructReference < 'reference, F, > where F : Clone,
{
    fn cloned(& self) -> Struct :: < F >
    {
        match self
        {
            Self { field : f_field, } => Struct :: < F >
            { field : (* * f_field).clone(), },
        }
    }
}
---------- derive-adhoc expansion of ReferenceVersion for Struct (end) ----------
---------- derive-adhoc expansion of ReferenceVersion for Enum (start) ----------
enum EnumReference < 'reference, F = (), >
{ Unit, Tuple(& 'reference F,), Struct { field : & 'reference F, } } impl <
'reference, F, > From < & 'reference Enum :: < F > > for EnumReference <
'reference, F, >
{
    fn from(ref_to_owned : & 'reference Enum :: < F >) -> Self
    {
        match ref_to_owned
        {
            Enum :: Unit {} => EnumReference :: Unit :: < F > {}, Enum ::
            Tuple { 0 : f_0, } => EnumReference :: Tuple :: < F >
            { 0 : f_0, }, Enum :: Struct { field : f_field, } => EnumReference
            :: Struct :: < F > { field : f_field, },
        }
    }
} impl < 'reference, F, > EnumReference < 'reference, F, > where F : Clone, F
: Clone,
{
    fn cloned(& self) -> Enum :: < F >
    {
        match self
        {
            Self :: Unit {} => Enum :: Unit :: < F > {}, Self :: Tuple
            { 0 : f_0, } => Enum :: Tuple :: < F > { 0 : (* * f_0).clone(), },
            Self :: Struct { field : f_field, } => Enum :: Struct :: < F >
            { field : (* * f_field).clone(), },
        }
    }
}
---------- derive-adhoc expansion of ReferenceVersion for Enum (end) ----------
