macro_rules! define_channels_params_and_automatic_impls { { $(
    $( #[doc $($doc_attr:tt)*] )*
    $( #[field $other_attr:meta] )*
    $field:ident : $ty:ty
),* $(,)? } => {

    #[derive(Debug, Educe, Clone, Eq, PartialEq)]
    #[educe(Default)]
    pub struct ChannelsParams {
      $(
        $( #[doc $($doc_attr)*] )*
        $( #[$other_attr] )*
        pub(crate) $field: $ty,
      )*
    }

    /// Reparameterisation message
    #[derive(Debug, Default, Clone, Eq, PartialEq)]
    pub struct ChannelsParamsUpdates {
      $(
        /// New value, if it has changed.
        pub(crate) $field: Option<$ty>,
      )*
    }

    impl<'c> ChannelsParamsUpdatesBuilder<'c> {
      $(
        $( #[doc $($doc_attr)*] )*
        ///
        /// (Adds this setting to the update, if it has changed.)
        pub fn $field(mut self, new_value: $ty) -> Self {
...
        }
      )*
...
}

define_channels_params_and_automatic_impls! {
    #[field educe(Default(expression = "interim_enable_by_env_var()"))]
    padding_enable: bool,

    padding_parameters: padding::Parameters
}


========================================

#[derive(Debug, Educe, Clone, Eq, PartialEq)]
#[educe(Default)]
#[derive(Adhoc)] // Call this the *CAPTURING* macro call
pub struct ChannelsParams { // Call this type the *DRIVER*
    #[field educe(Default(expression = "interim_enable_by_env_var()"))]
    padding_enable: bool,

    padding_parameters: padding::Parameters
}

derive_adhoc!{ // Call this the *INVOCATION* macro call
    ChannelsParams:

    #[derive(Debug, Default, Clone, Eq, PartialEq)]
    pub struct ChannelsParamsUpdates {
    $(
	/// New value, if it has changed.
	pub(crate) $field: Option<$ty>,
    )*
    }

    impl<'c> ChannelsParamsUpdatesBuilder<'c> {
      $(
	$( ${attr="doc"} )*
	///
	/// (Adds this setting to the update, if it has changed.)
	pub fn $field(mut self, new_value: $ty) -> Self {
    ...
	}
      )*
    }
}

========================================

FIRST PART GENRATES

macro_rules! derive_adhoc_apply_ChannelsParams {
 {
   $($template:tt)*
 } => {
   derive_adhoc_expand!{
     { ORIGINAL_STRUCT_DEFINITION }
     $($template)*
   }
 }
}

SECOND PART EXPANDS TO

// Call this the *CAPTURED* macro
derive_adhoc_apply_ChannelsParams!{
    #[derive_adhoc(ChannelsParams)]
    #[derive(Debug, Default, Clone, Eq, PartialEq)]
    pub struct ChannelsParamsUpdates {
    $(
	/// New value, if it has changed.
	pub(crate) $field: Option<$ty>,
    )*
    }

    ...
}

WHICH THEREFORE EXPANDS TO

derive_adhoc_expand!{
    { ORIGINAL_STRUCT_DEFINITION }

    #[derive(Debug, Default, Clone, Eq, PartialEq)]
    pub struct ChannelsParamsUpdates {
    $(
	/// New value, if it has changed.
	pub(crate) $field: Option<$ty>,
    )*
    }

    ...
}

===>

OUTPUT

######################################################################

REUSABLE MACROS


define_derive_adhoc!{
    Updates =

    pub struct $out_struct {
      $(
        pub(crate) $field: Option<$ty>,
      )*
    }
}

#[derive(Adhoc)]
#[derive_adhoc(Updates)]
pub struct ChannelsParams { // Call this type the *DRIVER*
    #[field educe(Default(expression = "interim_enable_by_env_var()"))]
    padding_enable: bool,

    padding_parameters: padding::Parameters
}

========================================

FIRST PART GENRATES

macro_rules! derive_adhoc_call_Updates {
 {
   $($driver:tt)*
 } => {
   derive_adhoc_expand!{
     { $($driver)* }
     TEMPLATE
   }
 }
}

SECOND PART'S EXTRA ATTRIBUTE GENERATES, ADDITIONALLY

derive_adhoc_call_Updates!{
    pub struct ChannelsParams {
	#[field educe(Default(expression = "interim_enable_by_env_var()"))]
	padding_enable: bool,

	padding_parameters: padding::Parameters
    }
}

WHICH THEREFORE EXPANDS TO

derive_adhoc_expand!{
    { ORIGINAL_STRUCT_DEFINITION }

    pub struct $out_struct {
      $(
        pub(crate) $field: Option<$ty>,
      )*
    }
}

AS BEFORE
