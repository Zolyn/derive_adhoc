# Template originally came from:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Rust.gitlab-ci.yml

stages:
  - test
  - comprehensive

default:
  before_script:
    # Print version info for debugging
    - rustc --version ||true
    - cargo --version ||true
    # See tests/stderr.rs
    - export STDERRTEST_CARGO_OPTIONS=--locked

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

cargo-check:
  stage: test
  script:
    - mv Cargo.lock.example Cargo.lock
    - cargo check --locked --workspace --verbose --all-features

cargo-fmt:
  stage: test
  script:
    - rustup component add rustfmt
    - cargo fmt --verbose --check

maint-check-bizarre:
  stage: test
  script:
    - maint/update-bizarre --check

# Check for FIXMEs.  This is in "comprehensive" so you can sabotage
# the CI, but still get it all to run - useful for iterating through CI.
maint-check-todos:
  stage: comprehensive
  script:
    - maint/check-blocking-todos

# Warning-only checks
check-doc-tocs:
  stage: test
  allow_failure: true
  script:
    - maint/update-tocs --check

# Actual tests
cargo-test:
  stage: test
  # Pin to a particular nightly, so our macro expansions don't change.
  image: rustlang/rust@sha256:415b7c22ab4a8a3ec3efc9cc8d7b018964f0c6757fff27bbd110e0ed92566321
  script:
    - ./maint/via-cargo-install-in-ci cargo-expand --version=1.0.40 --features=prettyplease
    - mv Cargo.lock.example Cargo.lock
    - cargo test --locked --workspace --verbose --all-features
  cache:
    paths:
      - cache/*

cargo-test-minfeatures:
  stage: comprehensive
  image: rustlang/rust@sha256:415b7c22ab4a8a3ec3efc9cc8d7b018964f0c6757fff27bbd110e0ed92566321
  script:
    - mv Cargo.lock.example Cargo.lock
    - cargo test --locked  -p derive-adhoc-tests --no-default-features --features=derive-adhoc-tests/recent

# Test on Stable Rust
#
# We don't enable the ui and macrotest fatures in derive-adhoc-tests, since
# we think their output might reasonably vary (in detail) when the with
# compiler changes.  But we do enable the "recent" feature to test even new
# features.
stable:
  stage: comprehensive
  script:
    - mv Cargo.lock.example Cargo.lock
    - cargo test --locked --workspace --verbose --features=derive-adhoc-tests/recent,derive-adhoc-tests/full

stable-minfeatures:
  stage: comprehensive
  script:
    - mv Cargo.lock.example Cargo.lock
    - cargo test --locked  -p derive-adhoc-tests --no-default-features --features=derive-adhoc-tests/recent

# Test our MSRV and Cargo.toml minimal versions
#
# We don't enable any of the optional fatures in derive-adhoc-tests.
minimal-versions:
  stage: comprehensive
  image: "rust:1.54.0"
  script:
    - mv Cargo.lock.minimal Cargo.lock
    - cargo +1.54.0 test --locked --workspace --no-default-features --features=derive-adhoc-tests/full

minimal-versions-minfeatures:
  stage: comprehensive
  image: "rust:1.54.0"
  script:
    - mv Cargo.lock.minimal Cargo.lock
    - cargo +1.54.0 test --locked  -p derive-adhoc-tests --no-default-features
